requires "edsl.k"
requires "../lemmas.k"

module VERIFICATION
    imports EDSL
    imports LEMMAS

    rule N -Int N => 0

    rule 0 <=Int (X modInt Y) => true

    rule (X modInt Y) <Int Y  => true

    rule 2 ^%Int X pow256 => 2 ^Int X  requires 0 <=Int X andBool X <Int 256

    rule 0 <=Int 2 ^Int X => true

    rule 2 ^Int X <Int pow256 => true  requires X <Int 256

    rule ((X *Int Y) /Int Z) /Int Y => X /Int Z

    rule 0 <=Int X &Int Y => true  requires 0 <=Int X andBool X <Int pow256
                                    andBool 0 <=Int Y andBool Y <Int pow256

    rule X &Int Y <Int pow256 => true  requires 0 <=Int X andBool X <Int pow256
                                        andBool 0 <=Int Y andBool Y <Int pow256

    rule 0 <=Int X |Int Y => true  requires 0 <=Int X andBool X <Int pow256
                                    andBool 0 <=Int Y andBool Y <Int pow256

    rule X |Int Y <Int pow256 => true  requires 0 <=Int X andBool X <Int pow256
                                        andBool 0 <=Int Y andBool Y <Int pow256

    rule X modInt Y => X requires 0 <=Int X andBool X <Int Y

    rule 0 <=Int (A -Word B) => true

    rule (A -Word B) <Int pow256 => true

    rule (0 <=Int #blockhash(_, _, _, _)) => true

    rule (#blockhash(_, _, _, _) <Int pow256) => true

    // (A *Int B /Int A ==Int B or A ==Int 0)
    rule chop(bool2Word((A *Int B) /Word A ==K B) |Int chop(A xorInt maxUInt256)) => 1
      requires A *Int B <Int pow256

    syntax Int ::= symkeccak ( Int ) [function, smtlib(smt_symkeccak)]
 // -------------------------------------------------------------------
    rule keccak(WS) => symkeccak(#asWord(WS))  requires notBool #isConcrete(WS)

    rule 0 <=Int symkeccak(N) => true

    rule symkeccak(N) <Int pow256 => true


    syntax Int ::= "maxUInt256"   [funciton]
                 | "maxInt128"    [function]
                 | "minInt128"    [function]
                 | "minInt128_2s" [function]
                 | "maxDecimal"   [function]
 // ----------------------------------------
    rule maxUInt256   => 115792089237316195423570985008687907853269984665640564039457584007913129639935  [macro]  /* pow256 - 1 */

    rule maxInt128    => 170141183460469231731687303715884105727  [macro]  /* 2^127 - 1 */

    rule minInt128    => -170141183460469231731687303715884105728  [macro]

    rule minInt128_2s => 115792089237316195423570985008687907853099843482180094807725896704197245534208  [macro]  /* pow256 - 2^127 */

    rule maxDecimal   => 1701411834604692317316873037158841057270000000000  [macro]  /* (2^127 - 1) * 10^10 */


    rule A s<Word (B -Word C) => 0  requires 0 <=Int A andBool A <=Int maxInt128
                                     andBool 0 <=Int B andBool B <=Int maxInt128
                                     andBool 0 <=Int C andBool C <=Int maxInt128
                                     andBool B -Int C <=Int A

    rule maxInt128 s<Word (A -Word B) => 0  requires 0 <=Int A andBool A <=Int maxInt128
                                             andBool 0 <=Int B andBool B <=Int maxInt128

    rule (A -Word B) s<Word minInt128_2s => 0  requires 0 <=Int A andBool A <=Int maxInt128
                                                andBool 0 <=Int B andBool B <=Int maxInt128


///////////////////////////////////////////////////////////////////////////////
// Macros
///////////////////////////////////////////////////////////////////////////////


    syntax Int ::= "#expectedBlockNumber" "(" Int "," Int ")"  [function]
 // ---------------------------------------------------------------------
    rule #expectedBlockNumber(EPOCH, EPOCHLEN) => EPOCH *Int EPOCHLEN -Int 1


    syntax Int ::= "#recommendedBlockHash" "(" List "," Int "," Int "," Int ")"  [function]
 // ---------------------------------------------------------------------------------------
    rule #recommendedBlockHash(HASHES, BLOCKNUM, EPOCH, EPOCHLEN)
        => #blockhash(HASHES, #expectedBlockNumber(EPOCH, EPOCHLEN), BLOCKNUM -Int 1, 0)


    syntax Int ::= "#setVoteBit" "(" Int "," Int ")"  [function]
 // ------------------------------------------------------------
    rule #setVoteBit(BITVECTOR, VID) => BITVECTOR |Int (2 ^Int (VID modInt 256))



///////////////////////////////////////////////////////////////////////////////
// Predicates
///////////////////////////////////////////////////////////////////////////////


    syntax Bool ::= "#notVoteBefore" "(" Int "," Int ")"  [function]
 // ----------------------------------------------------------------
    rule #notVoteBefore(BITVECTOR, VID)
        => (BITVECTOR &Int (2 ^Int (VID modInt 256))) ==Int 0


    syntax Bool ::= "#inCurDynasty" "(" Int "," Int "," Int ")"  [function]
 // -----------------------------------------------------------------------
    rule #inCurDynasty(START, END, CUR) => (START <=Int CUR) andBool (CUR <Int END)


    syntax Bool ::= "#inPrevDynasty" "(" Int "," Int "," Int ")"  [function]
 // ------------------------------------------------------------------------
    rule #inPrevDynasty(START, END, CUR) => (START <=Int (CUR -Int 1)) andBool ((CUR -Int 1) <Int END)


    syntax Bool ::= "#isJustified" "(" Int "," Int "," Int "," Int ")"  [function]
 // ------------------------------------------------------------------------------
    rule #isJustified(CURDYNVOTES, CURDYNDEPOSITS, PREVDYNVOTES, PREVDYNDEPOSITS)
        => (CURDYNVOTES >=Int CURDYNDEPOSITS *Int 2 /Int 3) andBool (PREVDYNVOTES >=Int PREVDYNDEPOSITS *Int 2 /Int 3)

endmodule
